import sqlite3
import logging
from datetime import datetime

# Logging sozlamalari
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class Database:
    def __init__(self, db_name="bot_database.db"):
        self.conn = sqlite3.connect(db_name, check_same_thread=False)
        self.cursor = self.conn.cursor()
        self.create_tables()

    def create_tables(self):
        """Foydalanuvchilar va buyurtmalar uchun jadvallarni yaratish"""
        # Foydalanuvchilar jadvali
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT NOT NULL,
                last_active TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # Buyurtmalar jadvali
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS orders (
                order_id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                user TEXT,
                username TEXT,
                phone TEXT,
                service TEXT NOT NULL,
                subject TEXT NOT NULL,
                pages INTEGER NOT NULL,
                price INTEGER NOT NULL,
                total_price INTEGER NOT NULL,
                deadline TEXT NOT NULL,
                status TEXT DEFAULT 'Jarayonda',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users(user_id)
            )
        ''')
        self.conn.commit()
        logger.info("Ma'lumotlar bazasi jadvallari yaratildi yoki tekshirildi.")

    # Foydalanuvchi qo‘shish
    def add_user(self, user_id, username):
        self.cursor.execute('INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)', (user_id, username))
        self.conn.commit()
        logger.info(f"Foydalanuvchi qo'shildi: {user_id} - @{username}")

    # Foydalanuvchi oxirgi faolligini yangilash
    def update_last_active(self, user_id):
        self.cursor.execute('UPDATE users SET last_active = ? WHERE user_id = ?', (datetime.now(), user_id))
        self.conn.commit()

    # Foydalanuvchini tekshirish
    def select_user(self, user_id):
        self.cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
        return self.cursor.fetchone()

    # Foydalanuvchilar sonini olish
    def count_users(self):
        self.cursor.execute('SELECT COUNT(*) FROM users')
        return self.cursor.fetchone()[0]

    # Buyurtma qo‘shish
    def add_order(self, order):
        self.cursor.execute('''
            INSERT INTO orders (user_id, user, username, phone, service, subject, pages, price, total_price, deadline, status)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            order['user_id'], order['user'], order['username'], order['phone'],
            order['service'], order['subject'], order['pages'], order['price'],
            order['total_price'], order['deadline'], order['status']
        ))
        self.conn.commit()
        order_id = self.cursor.lastrowid
        logger.info(f"Yangi buyurtma qo'shildi: #{order_id}")
        return order_id

    # Buyurtmalarni olish
    def get_orders(self, status=None):
        if status:
            self.cursor.execute('SELECT * FROM orders WHERE status = ?', (status,))
        else:
            self.cursor.execute('SELECT * FROM orders')
        return self.cursor.fetchall()

    # Buyurtma holatini yangilash
    def update_order_status(self, order_id, status):
        self.cursor.execute('UPDATE orders SET status = ? WHERE order_id = ?', (status, order_id))
        self.conn.commit()
        logger.info(f"Buyurtma #{order_id} holati yangilandi: {status}")

    # Buyurtmani o‘chirish
    def delete_order(self, order_id):
        self.cursor.execute('DELETE FROM orders WHERE order_id = ?', (order_id,))
        self.conn.commit()
        logger.info(f"Buyurtma #{order_id} o'chirildi")

    # Buyurtmani ID bo‘yicha olish
    def get_order_by_id(self, order_id):
        self.cursor.execute('SELECT * FROM orders WHERE order_id = ?', (order_id,))
        return self.cursor.fetchone()

    def close(self):
        self.conn.close()

db = Database()